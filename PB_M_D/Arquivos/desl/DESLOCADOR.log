KCPSM6 Assembler log file for program 'C:\Users\Guilherme\Documents\UnB\Pratica_de_Eletronica_Digital_2\2019_1\PicoBlaze_Files\Assembler\DESLOCADOR.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 04 Jun 2019
Assembly timestamp: 18:25:33

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 028 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 41
Memory locations available: 4055


Assembly listing

 Addr Code             Instruction

 000                   ; =========================================================
 000                   ; function: Shift and rotate vector
 000                   ; input register:
 000                   ; s1: swifts (vector)
 000                   ; s2: function
 000                   ; output register:
 000                   ; s3: result
 000                   ; temp register: s0
 000                   ; =========================================================
 000                   CONSTANT vector_1, 00  ; vector = 00H
 000                   CONSTANT vector_2, 01  ; vector = 01H
 000                   CONSTANT led, 02       ; led = 02H
 000            setup: 
 000  09100            INPUT s1, 00[vector_1] ; s1 <= entrada
 001  09201            INPUT s2, 01[vector_2] ; s2 <= controle
 002  09301            INPUT s3, 01[vector_2] ; s3 <= quantidade, loop index
 003  09401            INPUT s4, 01[vector_2] ; s4 <= modo
 004  031FF            AND s1, FF             ; s1 and 1111 1111
 005  0321F            AND s2, 1F             ; s2 and 0001 1111
 006  0331C            AND s3, 1C             ; s3 and 0001 1100
 007  03403            AND s4, 03             ; s4 and 0000 0011
 008             loop: 
 008  1440E            SR0 s4                 ; shift lower byte right,
 009                   ; lsb of s2 to C
 009  3E00B            JUMP NC, 00B[left]     ; lsb is 0
 00A  3A01A            JUMP C, 01A[right]     ; lsb is 1
 00B             left: 
 00B  1440E            SR0 s4                 ; shift lower byte right,
 00C                   ; lsb of s2 to C
 00C  3E00E            JUMP NC, 00E[shift_l]  ; lsb is 0
 00D  3A014            JUMP C, 014[rotate_l]  ; lsb is 1
 00E          shift_l: 
 00E  2D102            OUTPUT s1, 02[led]     ; led <= s1
 00F  14106            SL0 s1                 ; shift left 1-bit inserting ‘0’
 010  2D102            OUTPUT s1, 02[led]     ; led <= s1
 011  19301            SUB s3, 01             ; dec loop index
 012  3600E            JUMP NZ, 00E[shift_l]  ; repeat until i=0
 013  22000            JUMP 000[setup]        ; jump to setup
 014         rotate_l: 
 014  2D102            OUTPUT s1, 02[led]     ; led <= s1
 015  14102            RL s1                  ; rotate left 1-bit.
 016  2D102            OUTPUT s1, 02[led]     ; led <= s1
 017  19301            SUB s3, 01             ; dec loop index
 018  36014            JUMP NZ, 014[rotate_l] ; repeat until i=0
 019  22000            JUMP 000[setup]        ; jump to setup
 01A            right: 
 01A  1440E            SR0 s4                 ; shift lower byte right,
 01B                   ; lsb of s2 to C
 01B  3E01D            JUMP NC, 01D[shift_r]  ; lsb is 0
 01C  3A023            JUMP C, 023[rotate_r]  ; lsb is 1
 01D          shift_r: 
 01D  2D102            OUTPUT s1, 02[led]     ; led <= s1
 01E  1410E            SR0 s1                 ; shift right 1-bit inserting ‘0’
 01F  2D102            OUTPUT s1, 02[led]     ; led <= s1
 020  19301            SUB s3, 01             ; dec loop index
 021  3601D            JUMP NZ, 01D[shift_r]  ; repeat until i=0
 022  22000            JUMP 000[setup]        ; jump to setup
 023         rotate_r: 
 023  2D102            OUTPUT s1, 02[led]     ; led <= s1
 024  1410C            RR s1                  ; rotate rotate 1-bit.
 025  2D102            OUTPUT s1, 02[led]     ; led <= s1
 026  19301            SUB s3, 01             ; dec loop index
 027  36023            JUMP NZ, 023[rotate_r] ; repeat until i=0
 028  22000            JUMP 000[setup]        ; jump to setup


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\Guilherme\Documents\UnB\Pratica_de_Eletronica_Digital_2\2019_1\PicoBlaze_Files\Assembler\DESLOCADOR.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   18'd         
 timestamp_minutes 25'd         
 timestamp_seconds 33'd         
 datestamp_year    19'd         
 datestamp_month   6'd          
 datestamp_day     04'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 vector_1          00           DESLOCADOR.psm
 vector_2          01           DESLOCADOR.psm
 led               02           DESLOCADOR.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "04 Jun 2019"  
 timestamp$        "18:25:33"     



List of line labels

   Label      Addr  Source PSM File

   setup      000   DESLOCADOR.psm
 * loop       008   DESLOCADOR.psm
   left       00B   DESLOCADOR.psm
   shift_l    00E   DESLOCADOR.psm
   rotate_l   014   DESLOCADOR.psm
   right      01A   DESLOCADOR.psm
   shift_r    01D   DESLOCADOR.psm
   rotate_r   023   DESLOCADOR.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD              -
 STAR              -

 AND               4
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               4
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           -
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                1
 SR0               4
 SR1               -
 SRX               -
 SRA               -
 RR                1

 REGBANK           -

 INPUT             4
 OUTPUT            8
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             14
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            -
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
